// Code generated by "enumer -type PostKind -trimprefix PostKind -json"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PostKindName = "UndefinedKudoFine"

var _PostKindIndex = [...]uint8{0, 9, 13, 17}

const _PostKindLowerName = "undefinedkudofine"

func (i PostKind) String() string {
	if i < 0 || i >= PostKind(len(_PostKindIndex)-1) {
		return fmt.Sprintf("PostKind(%d)", i)
	}
	return _PostKindName[_PostKindIndex[i]:_PostKindIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PostKindNoOp() {
	var x [1]struct{}
	_ = x[PostKindUndefined-(0)]
	_ = x[PostKindKudo-(1)]
	_ = x[PostKindFine-(2)]
}

var _PostKindValues = []PostKind{PostKindUndefined, PostKindKudo, PostKindFine}

var _PostKindNameToValueMap = map[string]PostKind{
	_PostKindName[0:9]:        PostKindUndefined,
	_PostKindLowerName[0:9]:   PostKindUndefined,
	_PostKindName[9:13]:       PostKindKudo,
	_PostKindLowerName[9:13]:  PostKindKudo,
	_PostKindName[13:17]:      PostKindFine,
	_PostKindLowerName[13:17]: PostKindFine,
}

var _PostKindNames = []string{
	_PostKindName[0:9],
	_PostKindName[9:13],
	_PostKindName[13:17],
}

// PostKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PostKindString(s string) (PostKind, error) {
	if val, ok := _PostKindNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PostKindNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PostKind values", s)
}

// PostKindValues returns all values of the enum
func PostKindValues() []PostKind {
	return _PostKindValues
}

// PostKindStrings returns a slice of all String values of the enum
func PostKindStrings() []string {
	strs := make([]string, len(_PostKindNames))
	copy(strs, _PostKindNames)
	return strs
}

// IsAPostKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PostKind) IsAPostKind() bool {
	for _, v := range _PostKindValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PostKind
func (i PostKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PostKind
func (i *PostKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PostKind should be a string, got %s", data)
	}

	var err error
	*i, err = PostKindString(s)
	return err
}
